send(target: number or string, remotePort: number, localPort: number[, data: any except function]): boolean[, string]
	Sends an SNP packet to the target address.
	
	If target is a string, it will be resolved to an SNP by first checking the machine's DNS cache, and if it can't find it there it will perform a DNS request to the local SaberNet Router.
		Otherwise it will send this packet directly to the appropriate SaberNet host.
	
	remote_port is the 16-bit port from which the remote host should recieve this packet.
	
	local_port is the 16-bit port from which this machine will expect a reply to this packet.
	
	data will be sent as the payload of the SNP packet.
		If data is a table, it will be serialized on this end, then unserialized at the receiving end.
		
	This function returns true if the message was successfully sent, false and an error message otherwise.
		The error message will be of the form: "ERR_CODE:message" where ERR_CODE is:
			"NO_ROUTER": no router was found to send the message to.
			"BAD_SITE": site name not registered in the DNS database.
			"BAD_ADDR": the provided SNP address doesn't exist.
				If a site name was provided and this error is returned, contact the site owner to correct the DNS service.
			"OVERFLOW": data is too large to send in one packet.
		message will be a user-friendly error message

bind(port): boolean
	Opens the given port on this machine. This is equivalent to modem.open(port)
	
unbind(port)
	Closes the given port on this machine. This is equivalent to modem.close(port)

isConnected(): boolean
	Returns whether or not this computer is connected to SaberNet.

setPreferredAddress(hostAddr: number or nil): boolean
	This will make a DHCP request with this given host_addr as the preferred address.
	If host_addr is nil, it will relinquish the computer's preferred address and will be assigned one by the local Router.

	Returns true on success, false if the Router denies the request.

deletePreferredAddress()
	This will make a DHCP request with the "DEL" option.

connect(): boolean
	If this computer does not have an SNP address, this will make a DHCP request to obtain one.
	If the config file for this computer contains a preferred address, this will include it in the DHCP request.

disconnect()
	If this computer has an SNP address, this will make a DHCP request with the "DIS" option.

getHostAddress(): number or nil
	returns the SNP address assigned to this machine, nil of not connected.

emptyDNSCache()
	empties the DNS cache of this machine, forcing it to perform new DNS queries for future domain-SNP address resolutions.

emptyRARPCache()
	empties the RARP cache of this machine, forcing it to perform new RARP queries for future SNP address to physical address resolutions.

getRouterAddress(): number or nil
	returns the SNP address of this network's SaberNet Router, nil if disconnected.

getNetworkAddress(): number or nil
	returns this network's SNP address, nil if disconnected.

dnsLookup(siteName: string): table or nil
	Performs a DNS query to the local Router. If the domain is cached and the entry's timer is still active, it will refer to the cached response.
	If this computer is not connected to SaberNet, this method will attempt to connect itself by first performing a DHCP request.
	If this machine is disconnected and the DHCP request failed, this will return nil.
	If the SNP addres of the site is on the same network,
		a RARP request will also be sent and the result will be cached and recorded in the returned table.
	
	The table entries are as follows:
		snpAddr: number
			The SNP address of the requested site, nil on failure
		physAddr: string
			The physical address of the host if it is on this local network, nil if remote or failure
		isAuthoritative: boolean
			true if DNS request was sent, false if from cache.

rarpLookup(snpAddr: number): table or nil
	Performs a RARP query to the Router. If the requested SNP address is not a part of this network, this will return nil.
	Uses cacheing in the same fashion as dnsLookup().
	
	snpAddr is the local-network SNP address to be resolved into a physical address.
	
	On success, returns a table with the following entries:
		physAddr: string
			The physical address of the host if it is on this local network.
		isAuthoritative: boolean
			true if DNS request was sent, false if from cache.

listen(port: number[, timeout: number]): table or nil
	if the given port is bound, this function will block until a packet is received on the given port.

	If timeout is provided, this will return nil if the timer runs out.

	The returned table has the following entries:
		TX_NET: number
			network address of the remote host.
		TX_HOST: number
			host address of the remote host.
		TX_ADDR: number
			full SNP address of the remote host.
		TX_PORT: number or nil
			If the remote host provided a port to respond to, this is that port.
			If no remote port was specified, this will be nil.
		RX_PORT: number
			The port that this packet was received on.
		DATA: any except function
			The payload of the packet. If the payload was a serialized table, this will be the deserialized form.
		TYPE: string
			Datatype of the payload. See Lua documentation for possible values.
		SERVICE: number
			The ID of the service being used by this packet. See reserved service ID table.
		TIMESTAMP: number
			The Minecraft time that the last datagram of this packet was received.
		PACKET_QTY: number
			Number of datagrams used to transmit this packet.
